// This file is used with the Gabriel Knight-style
// Dialog system, as demonstrated in the AGS Video Tutorials
// on YouTube. (http://www.youtube.com/view_play_list?p=21DB402CB4DAEAEF)
// Author: densming
// Last Modification Date: 2009-04-25
// This is NOT an "all-inclusive" GK-style dialog system, but rather a
// demonstration of the types of customization that can be done within
// AGS.

// Directions:
// 1. Create a new room, and name it something like "Dialog Room"
//    This will be the room where your characters will "go" when a dialog takes place.
// 2. Paste this code at the top of that room's script file.
// 3. You'll need to create a separate view for each character that will be used
//    for the character's speech portrait animation to use while in the dialog.
// 4. Add the following new Property to your characters and populate it for each character with that character's dialog view you created in Step 2.
//    DialogView (int) (default value: 0)
// 4. Create the following 2 Global Variables:
//    currentDialog (int)
//    cSecondaryCharacter (Character*)
// 5. Add an Event for "Enters room before fade-in" of the new room, and
//    put the following in that function:
//    playerCharacterSpeechView = player.SpeechView;
//    playerCharacterNormalView = player.NormalView;
//    player.NormalView = player.GetProperty("DialogView");
//    player.SpeechView = player.GetProperty("DialogView");
//    playerCharacterOldX = player.x;
//    playerCharacterOldY = player.y;
//    player.x = System.ScreenWidth * 13 / 100;
//    player.y = 200; // this should be set to the height of the character
//    secondaryCharacterOldX = cSecondaryCharacter.x;
//    secondaryCharacterOldY = cSecondaryCharacter.y;
//    cSecondaryCharacter.ChangeRoom(5, System.ScreenWidth * 88 / 100, System.ScreenHeight);
//    secondaryCharacterNormalView = cSecondaryCharacter.NormalView;
//    secondaryCharacterSpeechView = cSecondaryCharacter.SpeechView;
//    cSecondaryCharacter.NormalView = cSecondaryCharacter.GetProperty("DialogView");
//    cSecondaryCharacter.SpeechView = cSecondaryCharacter.GetProperty("DialogView");
// 6. Add an Event for "Leaves room" of the new room, and put the following
//    in that function:
//      player.NormalView = playerCharacterNormalView;
//      player.SpeechView = playerCharacterSpeechView;
//      cSecondaryCharacter.NormalView = secondaryCharacterNormalView;
//      cSecondaryCharacter.SpeechView = secondaryCharacterSpeechView;
//      player.x = playerCharacterOldX;
//      player.y = playerCharacterOldY;
//      cSecondaryCharacter.x = secondaryCharacterOldX;
//      cSecondaryCharacter.y = secondaryCharacterOldY;
//      cSecondaryCharacter.ChangeRoom(player.PreviousRoom);
// 7. Add an Event for "Enters room after fade-in" of the new room, and put the
//    following in that function:
//      dialog[currentDialog].Start();
// 8. Each dialog should have an "Exit" option with the following script code:
//    @7 // (assuming option 7 is the Exit option)
//      player.ChangeRoom(player.PreviousRoom);
//    stop
// 9. Import the GKDialogSay module (right-click on Scripts in the
//    Project Tree, select Import script, and open the GKDialogSay.scm file).
//    Each dialog should use the GKDialogSay function for speech, instead of the default dialog syntax.
// 10.Now, whenever you want a dialog to take place, just do the following:
//      currentDialog = 7; // (change 7 to whatever dialog # you want to take place)
//      cSecondaryCharacter = cMyCharacter; // (change cMyCharacter to whatever character the player is speaking to in this dialog, aka the secondary character)
//      player.ChangeRoom(5); // (change 5 to the room number of the dialog room you created in step 1 above.)

int playerCharacterNormalView, playerCharacterSpeechView;
int secondaryCharacterNormalView, secondaryCharacterSpeechView;
int playerCharacterOldX, playerCharacterOldY, secondaryCharacterOldX, secondaryCharacterOldY;

function dialog_options_get_dimensions(DialogOptionsRenderingInfo *info)
{
  // Create a dialog options area
  
  // Set the Position.
  // The x coordinate should be 30% of the way across the screen
  // and the y coordinate to 0.
  info.X = System.ScreenWidth * 3 / 10;
  info.Y = 0;
  
  // Set the Size.
  // The width should be about 40% of the screen's width, and the height should be the full height of the screen.
  info.Width = System.ScreenWidth * 2 / 5;
  info.Height = System.ScreenHeight;
}

function GetDialogOptionsHeight(DialogOptionsRenderingInfo *info)
{
  int i = 1;
  int totalHeight = 0;

  while (i < info.DialogToRender.OptionCount) {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn) {  // We only want the active dialog options
      totalHeight += GetTextHeight(info.DialogToRender.GetOptionText(i), eFontFont1, info.Width - 10);
      // Add a buffer between options (the amount of the buffer is set in the General Settings)
      totalHeight += GetGameOption(OPT_DIALOGOPTIONSGAP);
    }
    i++;
  }
  return totalHeight;
}

function dialog_options_render(DialogOptionsRenderingInfo *info)
{
  // This function is called automatically by AGS whenever it needs to
  // draw the dialog options to the screen.  Its purpose is to render
  // and draw all the active dialog options to the screen so the player
  // can see and choose one.

  int i, ypos, totalHeight;

  // First, get the height of all the active options
  totalHeight = GetDialogOptionsHeight(info);

  // The y position of the top dialog option is
  // halfway down the options area (info.Height / 2)
  // and then up half the height of all the
  // active dialog options (totalHeight / 2).
  ypos = (info.Height / 2) - (totalHeight / 2);

  i = 1;
  while (i <= info.DialogToRender.OptionCount)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn) { // We only want the active dialog options
      // If the option we're drawing is the one that is active,
      // then highlight it with a different color
      if (info.ActiveOptionID == i) info.Surface.DrawingColor = 13;
      else {
        // We're not drawing the active option
        // Use two different colors for these options, depending
        // on whether the player has chosen the option before.
        if (info.DialogToRender.HasOptionBeenChosen(i))
          info.Surface.DrawingColor = 4;
        else
          info.Surface.DrawingColor = 5;
      }
      // Now we have enough information to draw the option to the screen.
      info.Surface.DrawStringWrapped(
        0,  // x position
        ypos, // y position
        info.Width - 10,  // leave 10 pixels of buffer for the width
        eFontFont1, // the font to use
        eAlignCentre,   // center the text
        info.DialogToRender.GetOptionText(i)  // the text to draw
        );
        
      // Increase the ypos by the height of the dialog option we just drew...
      ypos += GetTextHeight(info.DialogToRender.GetOptionText(i), eFontFont1, info.Width - 10);
      // ...plus the buffer between options.
      ypos += GetGameOption(OPT_DIALOGOPTIONSGAP);
    }
    i++;
  }
}

function dialog_options_get_active(DialogOptionsRenderingInfo *info)
{
  // This function is called by AGS automatically when it needs to get
  // which dialog option is the "active" option.  The active option is
  // the one that the player's mouse cursor is under.

  int i, ypos, totalHeight;

  // First, get the height of all the active options
  totalHeight = GetDialogOptionsHeight(info);

  // The y position of the top dialog option is
  // halfway down the options area (info.Height / 2)
  // and then up half the height of all the
  // active dialog options (totalHeight / 2).
  ypos = (info.Height / 2) - (totalHeight / 2);

  i = 1;
  while (i <= info.DialogToRender.OptionCount)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn) { // We only want the active dialog options
      // Increase the ypos by the height of the current dialog option...
      ypos += GetTextHeight(info.DialogToRender.GetOptionText(i), eFontFont1, info.Width - 10);
      // ...plus the buffer between options.
      ypos += GetGameOption(OPT_DIALOGOPTIONSGAP);
      
      // Now check to see if the y location of the mouse is above the ypos of the
      // current dialog option.  If it is, then we've found the active dialog option,
      // so set the ActiveOptionID and return.
      if ((mouse.y - info.Y) < ypos)
      {
        info.ActiveOptionID = i;
        return;
      }
    }
    i++;
  }
}

function room_Load()
{
  playerCharacterSpeechView = player.SpeechView;
  playerCharacterNormalView = player.NormalView;
  player.ChangeView(player.GetProperty("DialogView"));
  player.SpeechView = player.GetProperty("DialogView");
  playerCharacterOldX = player.x;
  playerCharacterOldY = player.y;
  player.x = System.ScreenWidth * 13 / 100;
  player.y = 100; // this should be set to the height of the character
  secondaryCharacterOldX = cSecondaryCharacter.x;
  secondaryCharacterOldY = cSecondaryCharacter.y;
  cSecondaryCharacter.ChangeRoom(5, System.ScreenWidth * 88 / 100, System.ScreenHeight);
  secondaryCharacterNormalView = cSecondaryCharacter.NormalView;
  secondaryCharacterSpeechView = cSecondaryCharacter.SpeechView;
  cSecondaryCharacter.ChangeView(cSecondaryCharacter.GetProperty("DialogView"));
  cSecondaryCharacter.SpeechView = cSecondaryCharacter.GetProperty("DialogView");
}

function room_Leave()
{
  player.ChangeView(playerCharacterNormalView);
  player.SpeechView = playerCharacterSpeechView;
  cSecondaryCharacter.ChangeView(secondaryCharacterNormalView);
  cSecondaryCharacter.SpeechView = secondaryCharacterSpeechView;
  player.x = playerCharacterOldX;
  player.y = playerCharacterOldY;
  cSecondaryCharacter.x = secondaryCharacterOldX;
  cSecondaryCharacter.y = secondaryCharacterOldY;
  cSecondaryCharacter.ChangeRoom(player.PreviousRoom);

}

function room_AfterFadeIn()
{
  dialog[currentDialog].Start();
}
